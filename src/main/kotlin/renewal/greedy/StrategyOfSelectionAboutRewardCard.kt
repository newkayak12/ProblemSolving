package renewal.greedy

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import java.util.PriorityQueue

class StrategyOfSelectionAboutRewardCard {
    /**
     * üü© Î¨∏Ï†ú Ïù¥Î¶Ñ: Î≥¥ÏÉÅ Ïπ¥Îìú ÏÇ¨Ïö© Ï†ÑÎûµ
     *
     * üìò Î¨∏Ï†ú ÏÑ§Î™Ö
     * ÎãπÏã†ÏóêÍ≤åÎäî Îã§ÏñëÌïú Î≥¥ÏÉÅ Ïπ¥ÎìúÎ•º ÏÇ¨Ïö©Ìï† Í∏∞ÌöåÍ∞Ä Ï£ºÏñ¥ÏßëÎãàÎã§. Í∞Å Î≥¥ÏÉÅ Ïπ¥ÎìúÎäî ÏÇ¨Ïö© Í∏∞Ìïú(ÎÇ†Ïßú)Í≥º Î≥¥ÏÉÅ Í∏àÏï°Ïù¥ Ï†ïÌï¥Ï†∏ ÏûàÏäµÎãàÎã§.
     * ÌïòÎ£®Ïóê Ìïú Î≤àÏî©, Í∏∞ÌïúÏù¥ ÎêòÍ∏∞ Ï†Ñ(Ìè¨Ìï®)ÍπåÏßÄ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Ïπ¥Îìú Ï§ë Î≥¥ÏÉÅÏù¥ Í∞ÄÏû• ÌÅ∞ Ïπ¥ÎìúÎ•º ÏÑ†ÌÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.
     *
     * Ï£ºÏñ¥ÏßÑ Ïπ¥Îìú Ï†ïÎ≥¥Î°ú, Î≥¥ÏÉÅ Í∏àÏï°Ïùò Ìï©Ïù¥ ÏµúÎåÄÍ∞Ä ÎêòÎèÑÎ°ù ÏÇ¨Ïö©ÌïòÎäî Í≤ΩÏö∞Ïùò Ï¥ù Î≥¥ÏÉÅ Í∏àÏï°ÏùÑ Íµ¨ÌïòÏÑ∏Ïöî.
     *
     * ‚∏ª
     *
     * üì• ÏûÖÎ†•
     *	‚Ä¢	Ï≤´Ïß∏ Ï§Ñ: Ïπ¥ÎìúÏùò Í∞úÏàò N (1 ‚â§ N ‚â§ 1,000)
     * 	‚Ä¢	ÎëòÏß∏ Ï§Ñ ~ N+1Î≤àÏß∏ Ï§Ñ: Í∞Å Ïπ¥ÎìúÏùò ÏÇ¨Ïö© Í∏∞Ìïú d(1 ‚â§ d ‚â§ 1,000)ÏôÄ Î≥¥ÏÉÅ Í∏àÏï° p(1 ‚â§ p ‚â§ 100,000)
     *
     * ‚∏ª
     *
     * üì§ Ï∂úÎ†•
     *	‚Ä¢	Î≥¥ÏÉÅ Í∏àÏï°Ïùò Ìï©Ïù¥ ÏµúÎåÄÍ∞Ä ÎêòÎäî Í∞íÏùÑ Ï∂úÎ†•ÌïòÏÑ∏Ïöî.
     *
     *
     *
     * üß™ ÏòàÏ†ú ÏûÖÎ†• 1
     * 	3
     * 1 10
     * 2 20
     * 3 30
     * -> 1ÏùºÏ∞®(10) + 2ÏùºÏ∞®(20) +3ÏùºÏ∞®(30)
     *
     * üß™ ÏòàÏ†ú Ï∂úÎ†• 1
     * 60
     *
     * üß™ ÏòàÏ†ú ÏûÖÎ†• 2
     * 5
     * 3 50
     * 3 10
     * 1 20
     * 2 40
     * 2 30
     *
     * üß™ ÏòàÏ†ú Ï∂úÎ†• 2
     * 120
     *
     * -> 1ÏùºÏ∞® (3 50), (3 10), (1 20), (2 40), ‚úÖ (2 30)
     * -> 2ÏùºÏ∞® (3 50), (3 10), ‚úÖ (2 40)
     * -> 3ÏùºÏ∞® ‚úÖ (3 50), (3 10)
     */


    @Test
    fun solution1() {
        val table = arrayOf(
            intArrayOf(1, 10),
            intArrayOf(2, 20),
            intArrayOf(3, 30),
        )

        val expected = 60

        assertEquals(expected, greedy(table))
    }

    @Test
    fun solution2() {
        val table = arrayOf(
            intArrayOf(3, 50),
            intArrayOf(3, 10),
            intArrayOf(1, 20),
            intArrayOf(2, 40),
            intArrayOf(2, 30),
        )

        val expected = 110

        assertEquals(expected, greedy(table))
    }

    @Test
    fun solution3() {
        val table = arrayOf(
            intArrayOf(1, 10),
            intArrayOf(2, 20),
            intArrayOf(3, 100),
            intArrayOf(1, 100),
            intArrayOf(2, 1),
        )

        val expected = 220

        assertEquals(expected, greedy(table))
    }


    private fun greedy(table: Array<IntArray>): Int {
        val sortedTable = table.sortedBy { it[0] }
        val dueDate = sortedTable.maxOf { it[0] }
        val queue = PriorityQueue<Int> (compareByDescending { it })

        var result = 0
        var index = 0

        for (day in 1 .. dueDate) {
           while(index < sortedTable.size && sortedTable[index][0] <= day){
               queue.add(sortedTable[index][1])
               index++
           }


            if(queue.isNotEmpty()) {
                result += queue.poll()
            }
        }


        return result
    }
}